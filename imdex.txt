<!-- templates/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynatrace Host Name Manager</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2em;
            margin-bottom: 10px;
        }

        .content {
            padding: 30px;
        }

        .form-section {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 8px;
            margin-bottom: 30px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .form-group input, .form-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.3s;
        }

        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #667eea;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .btn {
            padding: 12px 30px;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 20px rgba(102, 126, 234, 0.4);
        }

        .btn-success {
            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
            color: white;
        }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 20px rgba(56, 239, 125, 0.4);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none !important;
        }

        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .controls-left {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .pagination {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .pagination select {
            padding: 8px 12px;
            border: 2px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
        }

        .table-container {
            overflow-x: auto;
            border-radius: 8px;
            border: 1px solid #ddd;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }

        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        th {
            background: #f8f9fa;
            font-weight: 600;
            color: #333;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        tr:hover {
            background: #f8f9fa;
        }

        .checkbox-cell {
            width: 50px;
            text-align: center;
        }

        .checkbox-cell input[type="checkbox"] {
            width: 18px;
            height: 18px;
            cursor: pointer;
        }

        .name-preview {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .original-name {
            color: #dc3545;
            text-decoration: line-through;
        }

        .new-name {
            color: #28a745;
            font-weight: 600;
        }

        .status-badge {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }

        .status-success {
            background: #d4edda;
            color: #155724;
        }

        .status-error {
            background: #f8d7da;
            color: #721c24;
        }

        .loading {
            text-align: center;
            padding: 40px;
            font-size: 18px;
            color: #667eea;
        }

        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
        }

        .stat-card h3 {
            font-size: 32px;
            margin-bottom: 5px;
        }

        .stat-card p {
            font-size: 14px;
            opacity: 0.9;
        }

        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üñ•Ô∏è Dynatrace Host Name Manager</h1>
            <p>Bulk rename hosts with preview and selective validation</p>
        </div>

        <div class="content">
            <!-- Configuration Form -->
            <div class="form-section">
                <h2 style="margin-bottom: 20px;">Configuration</h2>
                <div class="form-row">
                    <div class="form-group">
                        <label for="osType">OS Type (Optional)</label>
                        <select id="osType">
                            <option value="">All OS Types</option>
                            <option value="LINUX">Linux</option>
                            <option value="WINDOWS">Windows</option>
                            <option value="AIX">AIX</option>
                            <option value="SOLARIS">Solaris</option>
                        </select>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="oldPrefix">Old Prefix</label>
                        <input type="text" id="oldPrefix" value="- C - PROD" placeholder="e.g., - C - PROD">
                    </div>
                    <div class="form-group">
                        <label for="newPrefix">New Prefix</label>
                        <input type="text" id="newPrefix" value="LCL - MUTU" placeholder="e.g., LCL - MUTU">
                    </div>
                </div>
                <button class="btn btn-primary" onclick="fetchHosts()">
                    üîç Fetch Hosts & Generate Preview
                </button>
            </div>

            <!-- Loading State -->
            <div id="loading" class="loading hidden">
                <div class="spinner"></div>
                <p>Fetching hosts from Dynatrace...</p>
            </div>

            <!-- Preview Section -->
            <div id="previewSection" class="hidden">
                <!-- Stats -->
                <div class="stats">
                    <div class="stat-card">
                        <h3 id="totalHosts">0</h3>
                        <p>Total Hosts</p>
                    </div>
                    <div class="stat-card">
                        <h3 id="selectedCount">0</h3>
                        <p>Selected</p>
                    </div>
                </div>

                <!-- Controls -->
                <div class="controls">
                    <div class="controls-left">
                        <button class="btn btn-primary" onclick="selectAll()">Select All</button>
                        <button class="btn btn-primary" onclick="deselectAll()">Deselect All</button>
                        <button class="btn btn-primary" onclick="selectPage()">Select Page</button>
                    </div>
                    <div class="pagination">
                        <label>Items per page:</label>
                        <select id="itemsPerPage" onchange="changeItemsPerPage()">
                            <option value="50">50</option>
                            <option value="100" selected>100</option>
                            <option value="200">200</option>
                            <option value="500">500</option>
                        </select>
                        <button class="btn btn-primary" onclick="previousPage()" id="prevBtn">Previous</button>
                        <span id="pageInfo">Page 1 of 1</span>
                        <button class="btn btn-primary" onclick="nextPage()" id="nextBtn">Next</button>
                    </div>
                </div>

                <!-- Table -->
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th class="checkbox-cell">
                                    <input type="checkbox" id="selectAllCheckbox" onchange="toggleSelectAll()">
                                </th>
                                <th>Host Name Preview</th>
                                <th>OS Type</th>
                                <th>IP Address</th>
                            </tr>
                        </thead>
                        <tbody id="hostsTableBody">
                        </tbody>
                    </table>
                </div>

                <!-- Validate Button -->
                <div style="margin-top: 30px; text-align: center;">
                    <button class="btn btn-success" onclick="validateSelection()" id="validateBtn">
                        ‚úì Validate & Update Selected Hosts
                    </button>
                </div>
            </div>

            <!-- Results Section -->
            <div id="resultsSection" class="hidden" style="margin-top: 30px;">
                <h2>Update Results</h2>
                <div id="resultsContent"></div>
            </div>
        </div>
    </div>

    <script>
        let allHosts = [];
        let currentPage = 1;
        let itemsPerPage = 100;

        async function fetchHosts() {
            const osType = document.getElementById('osType').value;
            const oldPrefix = document.getElementById('oldPrefix').value;
            const newPrefix = document.getElementById('newPrefix').value;

            document.getElementById('loading').classList.remove('hidden');
            document.getElementById('previewSection').classList.add('hidden');
            document.getElementById('resultsSection').classList.add('hidden');

            try {
                const response = await fetch('/api/fetch-hosts', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ osType, oldPrefix, newPrefix })
                });

                const data = await response.json();

                if (data.success) {
                    allHosts = data.hosts;
                    currentPage = 1;
                    document.getElementById('totalHosts').textContent = data.totalHosts;
                    renderTable();
                    document.getElementById('previewSection').classList.remove('hidden');
                } else {
                    alert('Error fetching hosts');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error connecting to server');
            } finally {
                document.getElementById('loading').classList.add('hidden');
            }
        }

        function renderTable() {
            const start = (currentPage - 1) * itemsPerPage;
            const end = start + itemsPerPage;
            const pageHosts = allHosts.slice(start, end);

            const tbody = document.getElementById('hostsTableBody');
            tbody.innerHTML = '';

            pageHosts.forEach((host, index) => {
                const globalIndex = start + index;
                const row = tbody.insertRow();
                
                row.innerHTML = `
                    <td class="checkbox-cell">
                        <input type="checkbox" ${host.selected ? 'checked' : ''} 
                               onchange="toggleHostSelection(${globalIndex})">
                    </td>
                    <td>
                        <div class="name-preview">
                            <span class="original-name">${host.originalName}</span>
                            <span class="new-name">${host.newName}</span>
                        </div>
                    </td>
                    <td>${host.osType}</td>
                    <td>${Array.isArray(host.ipAddress) ? host.ipAddress.join(', ') : host.ipAddress}</td>
                `;
            });

            updatePagination();
            updateSelectedCount();
        }

        function updatePagination() {
            const totalPages = Math.ceil(allHosts.length / itemsPerPage);
            document.getElementById('pageInfo').textContent = `Page ${currentPage} of ${totalPages}`;
            document.getElementById('prevBtn').disabled = currentPage === 1;
            document.getElementById('nextBtn').disabled = currentPage === totalPages;
        }

        function updateSelectedCount() {
            const selected = allHosts.filter(h => h.selected).length;
            document.getElementById('selectedCount').textContent = selected;
            document.getElementById('validateBtn').disabled = selected === 0;
        }

        function toggleHostSelection(index) {
            allHosts[index].selected = !allHosts[index].selected;
            updateSelectedCount();
        }

        function toggleSelectAll() {
            const checked = document.getElementById('selectAllCheckbox').checked;
            allHosts.forEach(host => host.selected = checked);
            renderTable();
        }

        function selectAll() {
            allHosts.forEach(host => host.selected = true);
            renderTable();
        }

        function deselectAll() {
            allHosts.forEach(host => host.selected = false);
            renderTable();
        }

        function selectPage() {
            const start = (currentPage - 1) * itemsPerPage;
            const end = start + itemsPerPage;
            for (let i = start; i < end && i < allHosts.length; i++) {
                allHosts[i].selected = true;
            }
            renderTable();
        }

        function nextPage() {
            const totalPages = Math.ceil(allHosts.length / itemsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                renderTable();
            }
        }

        function previousPage() {
            if (currentPage > 1) {
                currentPage--;
                renderTable();
            }
        }

        function changeItemsPerPage() {
            itemsPerPage = parseInt(document.getElementById('itemsPerPage').value);
            currentPage = 1;
            renderTable();
        }

        async function validateSelection() {
            const selectedHosts = allHosts.filter(h => h.selected);
            
            if (selectedHosts.length === 0) {
                alert('Please select at least one host');
                return;
            }

            if (!confirm(`Are you sure you want to update ${selectedHosts.length} host(s)?`)) {
                return;
            }

            document.getElementById('validateBtn').disabled = true;
            document.getElementById('validateBtn').textContent = 'Updating...';

            try {
                const response = await fetch('/api/update-hosts', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ selectedHosts })
                });

                const data = await response.json();

                if (data.success) {
                    displayResults(data);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error updating hosts');
            } finally {
                document.getElementById('validateBtn').disabled = false;
                document.getElementById('validateBtn').textContent = '‚úì Validate & Update Selected Hosts';
            }
        }

        function displayResults(data) {
            const resultsContent = document.getElementById('resultsContent');
            
            let html = `
                <div class="stats">
                    <div class="stat-card" style="background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);">
                        <h3>${data.updated}</h3>
                        <p>Successfully Updated</p>
                    </div>
                    <div class="stat-card" style="background: linear-gradient(135deg, #eb3349 0%, #f45c43 100%);">
                        <h3>${data.failed}</h3>
                        <p>Failed</p>
                    </div>
                </div>
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>Original Name</th>
                                <th>New Name</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            data.results.forEach(result => {
                const statusClass = result.success ? 'status-success' : 'status-error';
                const statusText = result.success ? 'Success' : 'Failed';
                
                html += `
                    <tr>
                        <td>${result.originalName}</td>
                        <td>${result.newName}</td>
                        <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                    </tr>
                `;
            });

            html += `
                        </tbody>
                    </table>
                </div>
            `;

            resultsContent.innerHTML = html;
            document.getElementById('resultsSection').classList.remove('hidden');
        }
    </script>
</body>
</html>